#!/bin/sh

relpath=`dirname $0`
relpath=`(cd "$relpath"; /bin/pwd)`
outpath=`/bin/pwd`

CONFIG_LOG="$outpath/config.log"

PREFIX=`/bin/pwd`/install
DEBUG=0
TESTS=0

QMAKE_EXEC=qmake

USE_BLKID=1


while [ "$#" -gt 0 ]; do
    case "$1" in
    -help)
        echo "Configure options:"
        echo
        echo " The defaults (*) are usually acceptable. A plus (+) denotes a default value"
        echo " that needs to be evaluated. If the evaluation succeeds, the feature is"
        echo " included. Here is a short explanation of each option:"
        echo
        echo "    -prefix <dir> ...... This will install everything relative to <dir>"
        echo "                         (default $PREFIX)"
        echo " *  -release ........... Compile and link QtSystemKit with debugging turned off."
        echo "    -debug ............. Compile and link QtSystemKit with debugging turned on."
        echo "    -developer-build ... Compile and link QtSystemKit with developer options (including auto-tests exporting)."
        echo
        echo "    -qmake-exec <name> . Sets custom qmake binary."
        echo
        echo " Qt/Linux only:"
        echo
        echo " *  -blkid ............. Use the BLKID for storage info."
        echo "    -no-blkid .......... Don't use the BLKID for storage info."
        echo
        exit
        ;;
    -prefix)
        shift
        PREFIX=$1
        ;;
    -release)
        DEBUG=0
        ;;
    -debug)
        DEBUG=1
        ;;
    -developer-build)
        TESTS=1
        DEBUG=1
        ;;
    -qmake-exec)
        shift
        QMAKE_EXEC=$1
        ;;
    -blkid)
        USE_BLKID=1
        ;;
    -no-blkid)
        USE_BLKID=0
        ;;
    *)
        echo >&2 "Invalid option: $1"
        exit
        ;;
    esac
    shift
done


WHICH="$relpath/config.tests/tools/which.test"

printf "Checking Qt"
if ! "$WHICH" $QMAKE_EXEC 2>/dev/null 1>&2; then
    QMAKE_EXEC_ALTERNATIVE=
    if "$WHICH" qmake4 2>/dev/null 1>&2; then
        QMAKE_EXEC_ALTERNATIVE=qmake4
    elif "$WHICH" qmake-qt4 2>/dev/null 1>&2; then
        QMAKE_EXEC_ALTERNATIVE=qmake-qt4
    fi

    if [ -z "$QMAKE_EXEC_ALTERNATIVE" ]; then
        printf " ... Not found\n\n" >&2
        echo >&2 "Cannot find "$QMAKE_EXEC" in your PATH.";
        echo >&2 "Aborting."
        exit 1
    else
        QMAKE_EXEC="$QMAKE_EXEC_ALTERNATIVE"
    fi
fi
printf " ... "
$QMAKE_EXEC -query QT_VERSION


MAKE=
for m in make gmake; do
    if "$WHICH" $m >/dev/null 2>&1; then
        MAKE=`$WHICH $m`
        break
    fi
done
if [ -z "$MAKE" ]; then
    echo >&2 "Cannot find 'make' or 'gmake' in your PATH";
    echo >&2 "Aborting."
    exit 1
fi


CACHEFILE="$outpath/.qmake.cache"

[ -f "$CACHEFILE" ] && rm -f "$CACHEFILE"

cat >>"$CACHEFILE" <<EOF
PREFIX = \$\$quote($PREFIX)

SOURCE_TREE = \$\$quote($relpath)
BUILD_TREE = \$\$quote($outpath)

DEBUG=$DEBUG
TESTS=$TESTS

EOF


compileTest()
{
    printf "Checking $1"
    CURRENT_PWD=`pwd`

    if [ "$outpath" = "$relpath" ]; then
        #doing source tree build
        cd "$relpath/config.tests/$2"
        rm -rf ./$2
    else
        #using shadow build
        rm -rf config.tests/$2
        mkdir -p config.tests/$2
        cd config.tests/$2
    fi

    $QMAKE_EXEC "$relpath/config.tests/$2/$2.pro" 2>> "$CONFIG_LOG" >> "$CONFIG_LOG"
    printf  " ."
    $MAKE clean >> "$CONFIG_LOG"
    printf "."
    $MAKE >> "$CONFIG_LOG" 2>&1
    printf ". "

    if [ -e ./$2 ]; then
        echo "OK"
        echo "$2_enabled = yes" >> "$CACHEFILE"
    else
        echo "Not Found"
        echo "$2_enabled = no" >> "$CACHEFILE"
    fi
    cd "$CURRENT_PWD"
}

if [ $USE_BLKID = 1 ]; then
    compileTest "BLKID" blkid
fi


echo
echo "Generating Headers..."
rm -rf $outpath/include
mkdir $outpath/include
$relpath/bin/syncheaders $outpath/include/QtSystemInfo $relpath/src/systeminfo


echo
echo "Running $QMAKE_EXEC..."
if $QMAKE_EXEC -makefile -recursive $relpath/qtsystemkit.pro; then
    echo
    echo "QtSystemKit is now configured for building. Just run 'make' to build."
    echo "Once everything is built, you can run 'make install' to install."
    echo
else
    echo
    echo "Configuration failed!"
    exit 1
fi
