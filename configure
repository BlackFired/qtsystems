#!/bin/sh

relpath=`dirname $0`
relpath=`(cd "$relpath"; /bin/pwd)`
outpath=`/bin/pwd`

CONFIG_IN="$outpath/config.in"
CONFIG_LOG="$outpath/config.log"

QT_SYSTEMKIT_PREFIX=$outpath/install
QT_SYSTEMKIT_IMPORTS=$QT_SYSTEMKIT_PREFIX/imports
QT_SYSTEMKIT_INCLUDE=$QT_SYSTEMKIT_PREFIX/include
QT_SYSTEMKIT_LIB=$QT_SYSTEMKIT_PREFIX/lib

BUILD_SILENT=
BUILD_UNITTESTS=
RELEASEMODE=

QMAKE_CACHE="$outpath/.qmake.cache"
QMAKE_EXEC=qmake

USE_BLKID=1
USE_OFONO=0


# Remove old stuffs
rm -rf "$CONFIG_IN"
rm -rf "$CONFIG_LOG"
rm -rf "$QMAKE_CACHE"


# Handle command line parameters
while [ "$#" -gt 0 ]; do
    case "$1" in
    -help)
        echo "Configure options:"
        echo
        echo " The defaults (*) are usually acceptable. A plus (+) denotes a default value"
        echo " that needs to be evaluated. If the evaluation succeeds, the feature is"
        echo " included. Here is a short explanation of each option:"
        echo
        echo "    -prefix <dir> ...... This will install everything relative to <dir>"
        echo "                         (default $QT_SYSTEMKIT_PREFIX)"
        echo "    -headerdir <dir> ... Header files will be installed to <dir>"
        echo "                         (default prefix: $QT_SYSTEMKIT_INCLUDE)"
        echo "    -importdir <dir> ... QML plugins will be installed to <dir>"
        echo "                         (default: $QT_SYSTEMKIT_IMPORTS)"
        echo "    -libdir <dir> ...... Libraries will be installed to <dir>"
        echo "                         (default: $QT_SYSTEMKIT_LIB)"
        echo
        echo " *  -release ........... Compile and link QtSystemKit with debugging turned off."
        echo "    -debug ............. Compile and link QtSystemKit with debugging turned on."
        echo "    -developer-build ... Compile and link QtSystemKit with developer options (including auto-tests exporting)."
        echo
        echo "    -qmake-exec <name> . Sets custom qmake binary."
        echo "    -silent ............ Reduces build output"
        echo
        echo " Qt/Linux only:"
        echo
        echo " *  -blkid ............. Use the BLKID for storage info."
        echo "    -no-blkid .......... Don't use the BLKID for storage info."
        echo
        echo "    -ofono ............. Use the oFono for network info."
        echo " *  -no-ofono .......... Don't use the oFono for network info."
        echo
        exit
        ;;
    -prefix)
        shift
        QT_SYSTEMKIT_PREFIX=$1
        ;;
    -headerdir)
        shift
        QT_SYSTEMKIT_INCLUDE="$1"
        ;;
    -importdir)
        shift
        QT_SYSTEMKIT_IMPORT="$1"
        ;;
    -libdir)
        shift
        QT_SYSTEMKIT_LIB="$1"
        ;;
    -release)
        RELEASEMODE=release
        ;;
    -debug)
        RELEASEMODE=debug
        ;;
    -developer-build)
        BUILD_UNITTESTS=yes
        DEBUG=1
        ;;
    -qmake-exec)
        shift
        QMAKE_EXEC=$1
        ;;
    -silent)
        BUILD_SILENT=yes
        ;;
    -blkid)
        USE_BLKID=1
        ;;
    -no-blkid)
        USE_BLKID=0
        ;;
    -ofono)
        USE_OFONO=1
        ;;
    -no-ofono)
        USE_OFONO=0
        ;;
    *)
        echo >&2 "Invalid option: $1"
        exit
        ;;
    esac
    shift
done


# Check dependencies
WHICH="$relpath/config.tests/tools/which.test"

printf "Checking Qt"
if ! "$WHICH" $QMAKE_EXEC 2>/dev/null 1>&2; then
    QMAKE_EXEC_ALTERNATIVE=
    if "$WHICH" qmake4 2>/dev/null 1>&2; then
        QMAKE_EXEC_ALTERNATIVE=qmake4
    elif "$WHICH" qmake-qt4 2>/dev/null 1>&2; then
        QMAKE_EXEC_ALTERNATIVE=qmake-qt4
    fi

    if [ -z "$QMAKE_EXEC_ALTERNATIVE" ]; then
        printf " ... Not found\n\n" >&2
        echo >&2 "Cannot find "$QMAKE_EXEC" in your PATH.";
        echo >&2 "Aborting."
        exit 1
    else
        QMAKE_EXEC="$QMAKE_EXEC_ALTERNATIVE"
    fi
fi
printf " ... "
$QMAKE_EXEC -query QT_VERSION


MAKE=
for m in make gmake; do
    if "$WHICH" $m >/dev/null 2>&1; then
        MAKE=`$WHICH $m`
        break
    fi
done
if [ -z "$MAKE" ]; then
    echo >&2 "Cannot find 'make' or 'gmake' in your PATH";
    echo >&2 "Aborting."
    exit 1
fi


compileTest()
{
    printf "Checking $1"
    CURRENT_PWD=`pwd`

    if [ "$outpath" = "$relpath" ]; then
        #doing source tree build
        cd "$relpath/config.tests/$2"
        rm -rf ./$2
    else
        #using shadow build
        rm -rf config.tests/$2
        mkdir -p config.tests/$2
        cd config.tests/$2
    fi

    $QMAKE_EXEC "$relpath/config.tests/$2/$2.pro" 2>> "$CONFIG_LOG" >> "$CONFIG_LOG"
    printf  " ."
    $MAKE clean >> "$CONFIG_LOG"
    printf "."
    $MAKE >> "$CONFIG_LOG" 2>&1
    printf ". "

    if [ -e ./$2 ]; then
        echo "OK"
        echo "$2_enabled = yes" >> "$CONFIG_IN"
    else
        echo "Not Found"
        echo "$2_enabled = no" >> "$CONFIG_IN"
    fi
    cd "$CURRENT_PWD"
}

if [ $USE_BLKID = 1 ]; then
    compileTest "BLKID" blkid
fi

if [ $USE_OFONO = 1 ]; then
    echo "ofono_enabled = yes" >> "$CONFIG_IN"
else
    echo "ofono_enabled = no" >> "$CONFIG_IN"
fi


# Set values for building
echo "QT_SYSTEMKIT_SOURCE_TREE = $relpath" >> "$QMAKE_CACHE"
echo "QT_SYSTEMKIT_BUILD_TREE = $outpath" >> "$QMAKE_CACHE"

if [ -z "$RELEASEMODE" ]; then
    RELEASEMODE="debug"
fi
echo "CONFIG += $RELEASEMODE" >> "$CONFIG_IN"

if [ -n "$BUILD_SILENT" ]; then
    echo "CONFIG += silent"  >> "$CONFIG_IN"
fi

if [ -z "$BUILD_UNITTESTS" ]; then
    echo "build_unit_tests = no" >> "$CONFIG_IN"
else
    echo "build_unit_tests = yes" >> "$CONFIG_IN"
fi

echo "QT_SYSTEMKIT_PREFIX = $QT_SYSTEMKIT_PREFIX" >> "$CONFIG_IN"
echo "QT_SYSTEMKIT_IMPORTS = $QT_SYSTEMKIT_IMPORTS" >> "$CONFIG_IN"
echo "QT_SYSTEMKIT_INCLUDE = $QT_SYSTEMKIT_INCLUDE" >> "$CONFIG_IN"
echo "QT_SYSTEMKIT_LIB = $QT_SYSTEMKIT_LIB" >> "$CONFIG_IN"

mv "$CONFIG_IN" config.pri


# Run qmake
echo
echo "Running $QMAKE_EXEC..."
if $QMAKE_EXEC -makefile -recursive $relpath/qtsystemkit.pro; then
    echo
    echo "QtSystemKit is now configured for building. Just run 'make' to build."
    echo "Once everything is built, you can run 'make install' to install."
    echo
else
    echo
    echo "Configuration failed!"
    exit 1
fi
